#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
var app = require("../app");
var debug = require("debug")("arduino:server");
var http = require("http");
const { startSockerServer } = require("./socketServer");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
console.log(process.env.COM_NAME);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
startSockerServer(server);

/**
 * Listen on provided port, on all network interfaces.
 */
// const { SerialPort } = require("serialport");

// var arduinoCOMPort = "COM6";
// var arduinoSerialPort = new SerialPort({
//   path: arduinoCOMPort,
//   baudRate: 9600,
// });
// arduinoSerialPort.on("open", function () {
//   console.log("Serial Port " + arduinoCOMPort + " is opened.");
//   arduinoSerialPort.on("data", (data) => {
//     console.log(data.toString());
//   });
// });

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
